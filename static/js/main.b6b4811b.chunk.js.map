{"version":3,"sources":["img/arrow.svg","img/black.svg","img/white.svg","Main.js","Double.js","Single.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Main","react_default","a","createElement","className","src","white","alt","Link","to","black","Double","saveText","textToWriteOne","document","getElementById","value","textToWriteTwo","textFileAsBlob","Blob","type","downloadLink","download","innerHTML","window","webKitURL","href","createObjectURL","URL","onclick","destroyClickedElement","style","display","body","appendChild","click","event","removeChild","target","_this2","this","arrow","width","height","onClick","id","name","rows","cols","lang","wrap","Component","Single","App","Route","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","BrowserRouter","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mFAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,sDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,mDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,4VC0CzBC,SA/BF,kBACTC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,mBACdH,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,4BAEJF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACfH,EAAAC,EAAAC,cAAA,OAAKE,IAAKC,IAAOC,IAAI,mBAErBN,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,YAAMF,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAMC,GAAG,WAAT,oBAEdR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAEnBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,OAAKE,IAAKK,IAAOH,IAAI,mBAEzBN,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,YAAMF,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAMC,GAAG,WAAT,oBAEdR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mCCkCpBO,oNA9DXC,SAAW,WAEP,IAAIC,EAAiBC,SAASC,eAAe,eAAeC,MACxDC,EAAiBH,SAASC,eAAe,eAAeC,MACxDE,EAAiB,IAAIC,KAAK,CAACN,EAAe,KAAOI,GAAiB,CAACG,KAAM,eAGzEC,EAAeP,SAASX,cAAc,KAC1CkB,EAAaC,SAHU,WAIvBD,EAAaE,UAAY,gBACD,MAApBC,OAAOC,UACPD,OAAOF,SAASI,KAAOF,OAAOC,UAAUE,gBAAgBT,IAExDG,EAAaK,KAAOF,OAAOI,IAAID,gBAAgBT,GAC/CG,EAAaQ,QAAUL,OAAOM,sBAC9BT,EAAaU,MAAMC,QAAU,OAC7BlB,SAASmB,KAAKC,YAAYb,IAE9BA,EAAac,WAGjBL,sBAAwB,SAACM,GACrBtB,SAASmB,KAAKI,YAAYD,EAAME,iFAG3B,IAAAC,EAAAC,KACL,OACIvC,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QACZH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAMC,GAAG,kBAAiBR,EAAAC,EAAAC,cAAA,OAAKE,IAAKoC,IAAOlC,IAAI,QAAQmC,MAAM,OAAOC,OAAO,YAE/E1C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACfH,EAAAC,EAAAC,cAAA,UACAiB,KAAK,SACLwB,QAAS,WAAOL,EAAK3B,YACrBI,MAAM,OACN6B,GAAG,QAJH,SASA5C,EAAAC,EAAAC,cAAA,YACA0C,GAAG,cACHzC,UAAU,cACV0C,KAAK,UACLC,KAAK,KAAKC,KAAK,MACfC,KAAK,KACLC,KAAK,SAELjD,EAAAC,EAAAC,cAAA,YACA0C,GAAG,cACHzC,UAAU,cACV0C,KAAK,UACLC,KAAK,KAAKC,KAAK,MACfC,KAAK,KACLC,KAAK,iBAzDAC,cCuDNC,oNArDXxC,SAAW,WAEP,IAAIC,EAAiBC,SAASC,eAAe,eAAeC,MACxDE,EAAiB,IAAIC,KAAK,CAACN,GAAiB,CAACO,KAAM,eAGnDC,EAAeP,SAASX,cAAc,KAC1CkB,EAAaC,SAHU,WAIvBD,EAAaE,UAAY,gBACD,MAApBC,OAAOC,UACPD,OAAOF,SAASI,KAAOF,OAAOC,UAAUE,gBAAgBT,IAExDG,EAAaK,KAAOF,OAAOI,IAAID,gBAAgBT,GAC/CG,EAAaQ,QAAUL,OAAOM,sBAC9BT,EAAaU,MAAMC,QAAU,OAC7BlB,SAASmB,KAAKC,YAAYb,IAE9BA,EAAac,WAGjBL,sBAAwB,SAACM,GACrBtB,SAASmB,KAAKI,YAAYD,EAAME,iFAG3B,IAAAC,EAAAC,KACL,OACIvC,EAAAC,EAAAC,cAAA,QAAMC,UAAU,eACZH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAMC,GAAG,kBAAiBR,EAAAC,EAAAC,cAAA,OAAKE,IAAKoC,IAAOlC,IAAI,QAAQmC,MAAM,OAAOC,OAAO,YAE/E1C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACXH,EAAAC,EAAAC,cAAA,UACAiB,KAAK,SACLwB,QAAS,WAAOL,EAAK3B,YACrBI,MAAM,OACN6B,GAAG,cAJH,QAQA5C,EAAAC,EAAAC,cAAA,YACA0C,GAAG,cACHzC,UAAU,kBACV0C,KAAK,UACLC,KAAK,KAAKC,KAAK,KACfC,KAAK,KACLC,KAAK,kBA/CJC,cCeNE,0LAVX,OACEpD,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACmD,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,iBAAiBC,UAAWzD,IAC9CC,EAAAC,EAAAC,cAACmD,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,UAAUC,UAAWL,IACvCnD,EAAAC,EAAAC,cAACmD,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,UAAUC,UAAW9C,YAN7BwC,cCIEO,QACW,cAA7BlC,OAAOmC,SAASC,UAEe,UAA7BpC,OAAOmC,SAASC,UAEhBpC,OAAOmC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO9D,EAAAC,EAAAC,cAAC6D,EAAA,EAAD,KAAe/D,EAAAC,EAAAC,cAAC8D,EAAD,OAAyBnD,SAASC,eAAe,SD0H1E,kBAAmBmD,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b6b4811b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/arrow.238a9f0c.svg\";","module.exports = __webpack_public_path__ + \"static/media/black.3b168bbe.svg\";","module.exports = __webpack_public_path__ + \"static/media/white.93a54c1f.svg\";","import React from 'react';\nimport { Link } from 'react-router-dom'\nimport black from './img/black.svg'\nimport white from './img/white.svg'\nimport './main.css'\n\nconst handleDonate = () => {\n    const url = 'https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=29SM3BMERQDDY&source=url';\n    window.open(url)\n}\n\nconst Main = () => (\n    <div className='container'>\n        <div className='transaltorkit'>\n            <div className='intro'>\n                <div className='side side-left'>\n                    <header className='translateheader'>\n                        <span>Free</span>\n                        <h1>TransaltorKit</h1>\n                    </header>\n                    <div className='intro-content'>\n                        <div className='profile'>\n                        <img src={white} alt='double-editor'></img>\n                        </div>\n                        <h1><span><Link to='/single'>Single Editor</Link></span></h1>\n                    </div>\n                    <div className=\"overlay\"></div>\n                </div>\n                <div className='side side-right'>\n                    <div className='intro-content'>\n                        <div className='profile'>\n                            <img src={black} alt='double-editor'></img>\n                        </div>\n                        <h1><span><Link to='/double'>Double Editor</Link></span></h1>\n                    </div>\n                    <div className=\"overlay\"></div>\n                </div>\n            </div>    \n        </div>\n    </div>\n);\n\nexport default Main","import React, { Component } from 'react'\nimport arrow from './img/arrow.svg'\nimport { Link } from 'react-router-dom'\nimport './double.css'\n\nclass Double extends Component {\n\n    saveText = () => {\n        \n        var textToWriteOne = document.getElementById('textarea-en').value;\n        var textToWriteTwo = document.getElementById('textarea-ar').value;\n        var textFileAsBlob = new Blob([textToWriteOne,'\\n' , textToWriteTwo], {type: 'text/plain'});\n        var fileNameToSaveAs = 'text.txt';\n\n        var downloadLink = document.createElement('a');\n        downloadLink.download = fileNameToSaveAs;\n        downloadLink.innerHTML = 'Download File';\n        if (window.webKitURL != null) {\n            window.download.href = window.webKitURL.createObjectURL(textFileAsBlob);\n        } else {\n            downloadLink.href = window.URL.createObjectURL(textFileAsBlob);\n            downloadLink.onclick = window.destroyClickedElement;\n            downloadLink.style.display = 'none';\n            document.body.appendChild(downloadLink);\n        }\n        downloadLink.click();\n    }\n    \n    destroyClickedElement = (event) => {\n        document.body.removeChild(event.target);\n    }\n    \n    render() {\n        return(\n            <main className='main'>\n                <div className='arrow'>\n                    <Link to='/translatorkit'><img src={arrow} alt='arrow' width='25px' height='25px;'></img></Link>\n                </div>\n                <div className='tools'>\n                <button\n                type='button'\n                onClick={() => {this.saveText()}}\n                value='Save'\n                id='save'\n                >\n                Save\n                </button>\n                </div>\n                <textarea \n                id=\"textarea-en\"\n                className='textarea-en' \n                name=\"en-text\"\n                rows=\"34\" cols=\"100\"\n                lang=\"en\"\n                wrap=\"hard\">\n                </textarea>\n                <textarea \n                id=\"textarea-ar\"\n                className='textarea-ar'\n                name=\"en-text\"\n                rows=\"34\" cols=\"100\"\n                lang=\"ar\"\n                wrap=\"hard\">\n                </textarea>\n            </main>\n        );\n    }\n}\n\nexport default Double","import React, { Component } from 'react'\nimport arrow from './img/arrow.svg'\nimport { Link } from 'react-router-dom'\nimport './single.css'\n\nclass Single extends Component {\n\n    saveText = () => {\n        \n        var textToWriteOne = document.getElementById('textarea-en').value;\n        var textFileAsBlob = new Blob([textToWriteOne], {type: 'text/plain'});\n        var fileNameToSaveAs = 'text.txt';\n\n        var downloadLink = document.createElement('a');\n        downloadLink.download = fileNameToSaveAs;\n        downloadLink.innerHTML = 'Download File';\n        if (window.webKitURL != null) {\n            window.download.href = window.webKitURL.createObjectURL(textFileAsBlob);\n        } else {\n            downloadLink.href = window.URL.createObjectURL(textFileAsBlob);\n            downloadLink.onclick = window.destroyClickedElement;\n            downloadLink.style.display = 'none';\n            document.body.appendChild(downloadLink);\n        }\n        downloadLink.click();\n    }\n    \n    destroyClickedElement = (event) => {\n        document.body.removeChild(event.target);\n    }\n\n    render() {\n        return(\n            <main className='main-single'>\n                <div className='arrow'>\n                    <Link to='/translatorkit'><img src={arrow} alt='arrow' width='25px' height='25px;'></img></Link>\n                </div>\n                <div className='single-container'>\n                    <button\n                    type='button'\n                    onClick={() => {this.saveText()}}\n                    value='Save'\n                    id='savesingle'\n                    >\n                    Save\n                    </button>\n                    <textarea \n                    id=\"textarea-en\"\n                    className='textarea-single' \n                    name=\"en-text\"\n                    rows=\"35\" cols=\"90\"\n                    lang=\"en\"\n                    wrap=\"hard\">\n                    </textarea>\n                </div>\n            </main>\n        );\n    }\n}\n\nexport default Single","import React, { Component } from 'react';\nimport { Route } from 'react-router-dom'\nimport Main from './Main'\nimport Double from './Double'\nimport Single from './Single'\nimport './App.css';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Route exact path='/translatorkit' component={Main}/>\n        <Route exact path='/single' component={Single}/>\n        <Route exact path='/double' component={Double}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<BrowserRouter><App /></BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}